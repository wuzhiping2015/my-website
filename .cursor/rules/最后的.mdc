---
description: 
globs: 
alwaysApply: false
---

## 一、项目概述
开发一个高性能、用户友好的船舶/工业设备数字孪生监控平台，通过精确的 3D 可视化实时呈现设备状态，实时监控关键运行参数，并集成智能故障诊断与预警功能，旨在帮助运维人员提前发现潜在问题，显著降低设备故障率，并最终延长设备使用寿命。

## 二、角色职责
### 产品经理
- 负责项目的整体规划和需求分析，明确目标用户群体和关键用户场景。
- 与前端开发工程师、Three.js 专家、数字孪生专家协作，制定功能模块规划和用户体验设计原则。
- 监控项目进度，协调资源，确保项目按计划交付。
- 收集用户反馈，推动产品迭代优化。

### 前端开发工程师
- 按照开发规范进行前端代码的开发，包括 Vue3 组件开发、Vite 配置等。
- 与设计师协作，确保设计稿的高质量还原。
- 参与代码审查和测试工作，保证代码质量。
- 负责前端性能优化，提升用户体验。

### Three.js 专家
- 负责数字孪生场景中的 3D 模型处理和渲染，包括模型导入、优化、材质处理等。
- 设计和实现 3D 场景的光照、相机系统，优化渲染性能。
- 与前端开发工程师协作，实现 3D 模型与前端页面的交互。
- 针对大型模型的性能问题，提出并实施优化方案，如 Draco 压缩、LOD 等。

### 数字孪生专家
- 深入理解船舶/工业设备的业务需求，设计数字孪生平台的功能模块和数据流。
- 负责实时数据的采集、处理和展示，实现 3D 模型状态映射和趋势分析。
- 设计智能故障诊断与预警功能，为运维人员提供决策支持。
- 参与项目的架构设计和技术选型，确保平台的可扩展性和稳定性。

## 三、开发流程
### 1. 项目初始化
#### 目录结构
```markdown
项目根目录
├─ docs/                    # 文档目录
│  ├─ architecture/        # 架构文档
│  ├─ components/          # 组件文档
│  ├─ api/                 # API文档
│  └─ performance/         # 性能优化文档
├─ src/
│  ├─ components/          # 通用组件
│  ├─ views/              # 页面组件
│  ├─ three/              # Three.js相关
│  │  ├─ models/          # 3D模型
│  │  ├─ shaders/         # 自定义着色器
│  │  └─ utils/           # Three.js工具函数
│  ├─ utils/              # 通用工具函数
│  ├─ types/              # Javascript定义
│  └─ store/              # Pinia状态管理
├─ tests/                  # 测试目录
├─ .vite/                  # Vite配置
├─ RULES.MD               # 开发规范
├─ README.MD              # 项目说明
└─ package.json           # 项目配置
```

#### README.MD 要求
- **功能说明**：按用户场景描述每个模块用途（如：「用户管理模块支持注册、登录、权限配置」）
- **技术栈**：明确编程语言、框架、关键技术
- **快速开始**：提供安装指南、配置示例、接口调用 Demo
- **维护说明**：标注代码目录结构、核心模块负责人、常见问题排查步骤

### 2. 需求分析
- 产品经理与相关利益者沟通，明确项目需求。
- 组织需求评审会议，邀请前端开发工程师、Three.js 专家、数字孪生专家等参与，确保需求的可行性和完整性。
- 输出详细的需求文档，包括功能需求、非功能需求、用户故事等。

### 3. 设计阶段
#### 前端与设计师协作规范
- **设计交接标准化**
  - **设计稿评审**：组织 UI 评审会议，确认交互逻辑、动效细节、响应式布局要求
  - **标注规范化**：要求设计师提供标准化的设计标注（颜色代码、字体大小、间距尺寸）
  - **组件化设计**：与设计师共同规划可复用 UI 组件，建立设计系统
  - **还原准确度评估**：建立 95%以上的还原率考核机制，关键节点由设计师确认
- **可行性反馈机制**
  - **技术约束沟通**：主动告知设计师浏览器兼容性、性能限制等技术约束
  - **替代方案建议**：对于难以实现的设计效果，提出可行替代方案并说明差异
  - **迭代优化流程**：建立设计实现→反馈→调整的闭环机制

#### 技术方案设计
- 前端开发工程师、Three.js 专家、数字孪生专家共同制定技术方案，包括技术选型、架构设计、数据流设计等。
- 进行技术方案评审，确保方案的合理性和可扩展性。

### 4. 开发阶段
#### 代码规范
- **Javascript 规范**
  - 类型定义规范
  - 接口设计标准
  - 泛型使用规范
- **组件设计原则**
  - 原子化设计
  - 组合式开发
  - 状态管理策略
- **Vite 配置规范**
  - 环境配置
    - 多环境支持
    - 环境变量管理
    - 代理配置
  - 构建优化
    - 依赖预构建
    - 资源处理
    - 代码分割

#### 前端团队内部协作机制
- **代码协作标准**
  - **组件拆分原则**：基于单一职责原则拆分组件，避免"上帝组件"
  - **状态管理规范**：区分局部状态与全局状态，统一管理方式 (Vuex/Pinia/Redux)
  - **Git 工作流**：统一采用功能分支 (feature branch) 工作流，每个功能独立分支开发
- **知识共享机制**
  - **组件文档**：使用 Storybook 等工具构建组件库文档
  - **技术方案评审**：关键功能实现前组织技术方案评审，集思广益
  - **代码复查机制**：实行交叉代码审查，确保代码质量与风格一致性

#### 数字孪生开发流程
- **模型处理流程**
  1. 模型导入与优化
  2. 材质处理与优化
  3. 动画系统集成
  4. 交互系统开发
  5. 性能优化
- **场景开发流程**
  1. 场景初始化
  2. 光照系统配置
  3. 相机系统配置
  4. 后期处理集成
  5. 性能监控

### 5. 测试阶段
#### 测试策略
- **单元测试**
  - 组件测试规范
  - 工具函数测试
  - 状态管理测试
- **性能测试**
  - 渲染性能测试
  - 加载性能测试
  - 内存泄漏检测

#### 质量保证
- **代码质量**
  - 代码规范
    - ESLint 配置
    - Prettier 配置
    - Javascript 配置
  - 测试要求
    - 单元测试覆盖率≥80%
    - 集成测试覆盖关键流程
    - 性能测试达标

### 6. 部署与上线
- 按照部署方案将项目部署到生产环境。
- 进行上线前的最后检查，确保系统正常运行。
- 发布上线公告，通知相关人员。

### 7. 维护与迭代
#### 持续优化机制
- 定期评审
- 性能指标监控
- 技术债务管理
- 知识沉淀

#### 迭代优化框架
- **数据驱动改进**：基于用户行为数据和性能监控数据进行针对性优化
- **技术债务管理**：每次迭代分配 20%时间用于技术债务清理和重构
- **渐进式架构升级**：避免大爆炸式重构，采用渐进式架构演进策略
- **创新实验机制**：设立创新时间，允许团队尝试新技术和创新解决方案

## 四、技术规范
### 1. Vue3 开发规范
- 遵循 Vue3 的组合式 API 开发模式，提高代码的可维护性和复用性。
- 合理使用响应式原理，避免不必要的性能开销。
- 组件命名遵循 PascalCase 规范，文件命名遵循 kebab-case 规范。

### 2. Three.js 开发规范
- 模型加载使用异步加载方式，避免阻塞主线程。
- 对大型模型进行压缩处理，如使用 Draco 压缩算法。
- 优化材质和纹理，减少内存占用。
- 合理设置相机和光照，提高渲染效果。

### 3. 数字孪生开发规范
- 实时数据采集和处理要保证数据的准确性和及时性。
- 实现 3D 模型状态映射，通过颜色变化、动态效果等展示设备状态。
- 提供趋势分析图表和运行状态总览，为运维人员提供决策支持。

## 五、质量控制
### 1. 代码审查
- 实行交叉代码审查，确保代码质量和风格一致性。
- 审查内容包括代码规范、逻辑正确性、性能优化等方面。

### 2. 测试
- 严格执行单元测试、集成测试和性能测试，确保代码质量和系统稳定性。
- 对测试结果进行分析和跟踪，及时修复发现的问题。

### 3. 监控与预警
- 实时监控系统的性能指标，如 FPS、内存占用等。
- 建立异常报警机制，及时发现和处理系统异常。

## 六、风险预防
### 1. 修改风险
- **最小化修改**：仅调整问题相关代码，避免触碰已验证功能。
- **代码备份**：修改前创建临时分支，保留原始文件。
- **回归测试**：修改后运行全量测试，确保未引入新问题。

### 2. 性能风险
- **模型优化**：大型模型（如 K60 发电机）必须压缩，控制三角面数。
- **渲染控制**：限制同时渲染对象数量，开启 `frustumCulling`。
- **监控预警**：实时监控 FPS 和内存，异常时自动降级。

### 3. 数据风险
- **数据校验**：所有传感器数据需经过格式和范围校验。
- **异常处理**：捕获网络中断、数据缺失等异常，提供降级方案。
- **安全保护**：加密传输敏感数据，限制 API 访问。

## 七、问题处理模板
### 1. 问题分析模板
```markdown
1. 问题描述
   - 问题现象
   - 复现步骤
   - 环境信息

2. 原因分析
   - 直接原因
   - 根本原因
   - 影响范围
```

### 2. 解决方案模板
```markdown
1. 解决思路
   - 技术方案
   - 实现步骤
   - 预期效果

2. 验证方案
   - 测试用例
   - 性能指标
   - 验收标准
```

### 3. 实施记录模板
```markdown
1. 修改记录
   - 修改文件
   - 修改内容
   - 修改原因

2. 验证记录
   - 测试结果
   - 性能数据
   - 问题反馈
```

## 八、Cursor Agent 使用指南
### 1. 提问规范
- **逐步提问**：分步引导 Cursor Agent 分析问题，避免一次性抛出复杂需求。
- **提供上下文**：附上代码片段、错误日志、复现步骤。
- **明确意图**：说明期望结果（如“找出错误原因”或“提供优化方案”）。

### 2. 工具使用
- **文件操作**：
  - 创建：`create_file`
  - 修改：`edit_file`
  - 删除：`delete_file`
  - 查看：`read_file`
- **代码搜索**：
  - 语义搜索：`codebase_search`
  - 精确搜索：`grep_search`
  - 目录查看：`list_dir`
- **终端操作**：
  - 命令执行：`run_terminal_cmd`
  - 后台任务：`is_background`
  - 需要确认：`require_user_approval`

### 3. 提示词模板
```markdown
“Cursor Agent，请执行以下任务：
1. 阅读 src/views/Demo3.vue，分析 GLTF 模型加载卡顿的原因。
2. 使用 codebase_search 查找相关代码，定位性能瓶颈。
3. 提供优化方案，包括 Draco 压缩和 LOD 实现，附上代码示例。
4. ⚠️ 修改前备份文件，确保不影响其他页面逻辑。
5. 提供测试用例和预期性能指标。
请按‘提问 - 分析 - 执行 - 反馈’流程回复，随时提问澄清需求。🤔”
```

## 九、版本记录
### V1.0（2025 - 04 - 29）
- 整合多份文档，覆盖 Node.js、Vue3、Three.js、数字孪生开发规范。
- 明确产品经理、前端开发工程师、Three.js 专家、数字孪生专家职责。
- 细化开发流程、质量控制、风险预防，新增代码示例和提示词模板。
- 针对大型模型性能问题，提出 Draco 压缩、LOD 等优化方案。

### V1.1（待发布）
- 待补充具体更新内容

## 十、使用说明
1. **新需求**：按“初始化→需求分析→开发实现→问题解决→文档更新”流程执行。
2. **代码提交**：通过 ESLint、测试用例、人工评审四重校验。
3. **问题处理**：遵循问题分析模板，提供最小化修改方案。
4. **性能优化**：定期检查 FPS、内存、加载时间，确保指标达标。
5. **文档维护**：每次任务完成后更新 README.MD，形成知识沉淀。

通过以上规范，确保：   
✅ 需求理解无偏差
✅ 技术方案可追溯
✅ 代码质量可量化
✅ 系统性能稳定
✅ 项目修改不崩溃

🤔 请审阅这份进一步完善后的文档内容，确认是否符合您的需求。如果需要进一步调整（如补充特定场景的代码示例、细化某模块规范），请提供具体反馈，我将按“提问 - 分析 - 执行 - 反馈”闭环迭代优化。⚠️ 如需修改现有项目代码，请提供相关文件，我会严格遵循最小化修改原则，确保系统稳定性。