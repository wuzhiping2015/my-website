---
description: 
globs: 
alwaysApply: false
---
# Cursor Rules 辅助编程文档整合

## 一、基础规则
### 1. 对话流程规范
- **交互规则**：遵循“提问 - 分析 - 执行 - 反馈”闭环，使用emoji增强亲和力（🤔思考中、✅完成、⚠️注意等），保持专业友好语气，全程使用中文沟通。
- **工具使用规范**
  - **文件操作**
    - 创建：`create_file`
    - 修改：`edit_file`
    - 删除：`delete_file`
    - 查看：`read_file`
  - **代码搜索**
    - 语义搜索：`codebase_search`
    - 精确搜索：`grep_search`
    - 目录查看：`list_dir`
  - **终端操作**
    - 命令执行：`run_terminal_cmd`
    - 后台任务：设置`is_background`
    - 需要确认：设置`require_user_approval`

## 二、项目初始化
### 1. 目录结构规范
```markdown
项目根目录
├─ docs/                    # 文档目录
│  ├─ architecture/        # 架构文档
│  ├─ components/          # 组件文档
│  ├─ api/                 # API文档
│  └─ performance/         # 性能优化文档
├─ src/
│  ├─ components/          # 通用组件
│  ├─ views/               # 页面组件
│  ├─ three/               # Three.js相关
│  │  ├─ models/           # 3D模型
│  │  ├─ shaders/          # 自定义着色器
│  │  └─ utils/            # Three.js工具函数
│  ├─ utils/               # 通用工具函数
│  ├─ types/               # 定义
│  └─ store/               # Pinia状态管理
├─ tests/                  # 测试目录
├─ .vite/                  # Vite配置
├─ RULES.MD               # 开发规范
├─ README.MD              # 项目说明
└─ package.json           # 项目配置
```

### 2. 文档要求
- **README.md内容**
  - 功能说明：按用户场景描述每个模块用途（如：「用户管理模块支持注册、登录、权限配置」）
  - 技术栈说明：明确编程语言、框架、关键技术
  - 使用指南：提供安装指南、配置示例、接口调用Demo
  - 维护说明：标注代码目录结构、核心模块负责人、常见问题排查步骤
- **代码注释规范**：使用JSDoc格式，包含参数说明、返回值说明、异常处理说明

## 三、问题处理与需求变更规范
### 1. 代码问题处理流程
- **问题分析阶段**
  - 完整阅读相关代码
  - 理解功能逻辑
  - 使用工具定位问题（`codebase_search`语义搜索、`grep_search`精确搜索、`read_file`查看代码）
- **问题诊断阶段**
  - 收集错误信息（控制台错误、网络请求状态、性能指标）
  - 复现问题（记录复现步骤、环境信息、输入输出）
- **解决方案制定**
  - 最小化修改原则（只修改问题代码、不触碰已验证功能、保持代码结构）
  - 修改前备份（创建临时分支、记录修改点、准备回滚方案）
- **验证与反馈**
  - 功能验证（测试修改功能、相关功能、回归测试）
  - 性能验证（检查性能指标、监控内存使用、测试响应时间）

### 2. 问题处理模板
- **问题分析模板**
  - 问题描述（问题现象、复现步骤、环境信息）
  - 原因分析（直接原因、根本原因、影响范围）
- **解决方案模板**
  - 解决思路（技术方案、实现步骤、预期效果）
  - 验证方案（测试用例、性能指标、验收标准）
- **实施记录模板**
  - 修改记录（修改文件、修改内容、修改原因）
  - 验证记录（测试结果、性能数据、问题反馈）

## 四、开发规范
### 1. Vue3开发规范
- **组件开发**
  - 使用组合式API
  - 使用`<script setup>`语法糖
  - 遵循单一职责原则
  - 组件命名规范
- **状态管理**
  - 使用Pinia
  - 状态分类管理
  - 状态持久化
- **性能优化**
  - 组件懒加载
  - 虚拟滚动
  - 组件缓存

### 2. Vite配置规范
- **环境配置**
  - 多环境支持
  - 环境变量管理
  - 代理配置
- **构建优化**
  - 依赖预构建
  - 资源处理
  - 代码分割

### 3. 数字孪生开发规范
- **Three.js集成**
  - 场景管理
  - 模型处理
  - 材质系统
  - 动画系统
- **性能优化**
  - 模型优化
  - 渲染优化
  - 内存管理

## 五、质量保证
### 1. 代码质量
- **代码规范**
  - ESLint配置
  - Prettier配置
  - javascript 配置
- **测试要求**
  - 单元测试覆盖率≥80%
  - 集成测试覆盖关键流程
  - 性能测试达标

### 2. 性能指标
- **加载性能**
  - 首屏加载≤2秒
  - FPS≥60
  - 内存占用≤100MB
- **渲染性能**
  - 避免布局抖动
  - 优化重绘重排
  - 合理使用缓存

## 六、安全与监控
### 1. 安全规则
- **代码安全**
  - 输入验证
  - 异常处理
  - 安全风险防范
- **数据安全**
  - 敏感数据保护
  - 数据规范遵循
  - 隐私保护

### 2. 监控体系
- **性能监控**
  - 前端监控（性能指标、错误监控、用户行为）
  - 数字孪生监控（帧率监控、内存监控、模型加载）
- **优化策略**
  - 代码优化（代码分割、资源优化、缓存策略）
  - 性能优化（渲染优化、加载优化、内存优化）

## 七、版本管理
### 1. 版本控制
- **版本号规范**：主版本号、次版本号、修订号
- **更新记录**：功能更新、问题修复、性能优化

### 2. 发布流程
- **预发布**
  - 功能测试
  - 性能测试
  - 兼容性测试
- **正式发布**
  - 版本确认
  - 文档更新
  - 监控部署

## 八、其他规则
### 1. 协作规则
- **需求处理**
  - 理解用户需求
  - 提供可行性分析
  - 提供实施方案
- **问题解决**
  - 分析问题原因
  - 提供解决方案
  - 进行验证测试

### 2. 错误处理规则
- **代码错误**
  - 提供详细的错误分析
  - 提供可行的解决方案
  - 进行必要的测试验证
- **工具错误**
  - 记录错误信息
  - 提供替代方案
  - 必要时请求用户协助

### 3. 文档维护规则
- **README.md更新**
  - 功能更新必须同步更新文档
  - 问题修复必须记录在文档中
  - 重要决策必须记录在文档中
- **代码注释**
  - 使用JSDoc格式
  - 包含参数说明
  - 包含返回值说明
  - 包含异常处理说明

### 4. 性能优化规则
- **代码优化**
  - 考虑性能影响
  - 进行必要的测试
  - 记录优化结果
- **资源优化**
  - 优化资源加载
  - 考虑缓存策略
  - 监控资源使用

### 5. 测试规则
- **单元测试**
  - 编写测试用例
  - 进行测试验证
  - 记录测试结果
- **性能测试**
  - 进行性能测试
  - 记录性能数据
  - 优化性能问题

### 6. 安全规则
- **代码安全**
  - 处理输入验证
  - 处理异常情况
  - 考虑安全风险
- **数据安全**
  - 保护敏感数据
  - 遵循数据规范
  - 考虑隐私保护

### 7. 开发流程规则
- **项目初始化**
  - 创建README.md文件
  - 建立清晰的目录结构
  - 配置必要的开发环境
- **代码开发**
  - 遵循SOLID原则
  - 使用设计模式
  - 保持代码注释完整
  - 实现必要的错误处理

这个文档整合了各个方面的规则和规范，为使用Cursor Rules进行辅助编程提供了全面的指导。你可以根据实际项目需求进行调整和补充。 